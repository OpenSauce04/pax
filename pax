#!/usr/bin/env ruby

version = "0.0.0"

mode_sync = false
mode_refresh = false
mode_upgrade = false
mode_clean = false

mode_remove = false
mode_autoremove = false
mode_purge = false

mode_container = false
mode_init = false
mode_export = false
mode_unexport = false
mode_enter = false
mode_run = false

mode_verbose = false
mode_test = false

packages = []

def bold(str) return "\033[1m" + str + "\033[0m" end

def showHelp()
  puts "\n            " + bold("pax") + "\napx with pacman-like syntax\n\n"
  puts
  puts bold("Flags [-]")
  puts "  "+bold('S')+" - Install package(s) / Installation-related operations"
  puts "    "+bold('y')+" - Update package list"
  puts "    "+bold('u')+" - Upgrade all available packages"
  puts "    "+bold('c')+" - Clean apx cache"
  puts
  puts "  "+bold('R')+" - Remove package(s) / Removal-related operations"
  puts "    "+bold('u')+" - Remove all unused packages"
  puts "    "+bold('p')+" - Purge removed package(s)"
  puts
  puts "  "+bold('C')+" - Container-related operations"
  puts "    "+bold('i')+" - Initialize a container"
  puts "    "+bold('s')+" - Export container package"
  puts "    "+bold('u')+" - Un-export container package"
  puts "    "+bold('e')+" - Enter container"
  puts "    "+bold('x')+" - Execute program within a container"
  puts
  puts "  "+bold('v')+" - Show the commands that will be executed by apx"
  puts "  "+bold('t')+" - Do not execute the command (usually used with -v)"
  puts "  "+bold('h')+" - Help | Show this message"
  puts "  "+bold('V / --version')+" - Show version number"
  puts
  puts bold("Select container [@]")
  puts "  "+bold('@')+"[distro]"
  puts "  Available:"
  puts "    apt - Ubuntu"
  puts "    aur - Arch + AUR"
  puts "    dnf - Fedora"
  puts "    apk - Alpine"
  puts "    zypper - openSUSE"
  puts "    xbps - Void"
  puts "    nix - Nixpkgs"
  puts
  puts bold("Example")
  puts " pax -Ru @aur && pax -Syu wine @aur"
  puts "• Removes all unused packages in the Arch container"
  puts "• Updates package lists in the Arch container"
  puts "• Upgrades available packages in the Arch container"
  puts "• Installs wine in the Arch container"
  puts
  exit 0
end

distro = "NONE"

# Parse command line arguments
ARGV.each do|arg|

  if arg.start_with?('@')
    distro = arg.sub('@', "--")
    next
  end

  isOps = arg.start_with?('-')

  if isOps # Parse as options

    arg.split("").drop(1).each do |char|

      if arg.include?('V') || arg.eql?("--version")
        puts "\n         " + bold("pax v" + version) + "\napx with pacman-like syntax\n\n"
        exit 0
      end

      case char

        when 'S'
          mode_sync = true
        when 'y'
          mode_refresh = true
        when 'u'
          mode_upgrade = true
          mode_autoremove = true # As this is a switch case, mode flags that use the same key need to be in the same "when"
          mode_unexport = true
        when 'c'
          mode_clean = true

        when 'R'
          mode_remove = true
        #when 'u'
          #mode_autoremove = true
        when 'p'
          mode_purge = true

        when 'C'
          mode_container = true
        when 's'
          mode_export = true
        #when 'u'
          #mode_unexport = true
        when 'e'
          mode_enter = true
        when 'i'
          mode_init = true
        when 'x'
          mode_run = true

        when 'v'
          mode_verbose = true
        when 't'
          mode_test = true
        when 'h'
          showHelp()

        else
          puts "error: invalid option '" + bold(char) + "'"
          exit 1
    end

  end

  else # Parse as package names

    packages.append(arg)

  end

end

# Validate mode combination
if ((mode_sync || mode_refresh || mode_clean) && !mode_sync) \
|| (mode_autoremove && !mode_remove && !mode_sync && !mode_container) \
|| (mode_purge && !mode_remove)\
|| ((mode_init || mode_export || mode_enter || mode_run) && !mode_container) \
|| (mode_sync ^ mode_remove ? mode_container : mode_sync) # Magic 3-way comparison I found on Stack Overflow
  STDERR.puts "error: invalid option combination"
  exit 1
end

# Build the command that will be executed
PRE = "apx "
if distro != "NONE"
  if distro != "--all"
    PRE << distro+' '
    POST = " && "
  else
    POST = " "+distro+" && "
  end
end

command = ""

# Sync operations
command << PRE + "clean" + POST if mode_clean && mode_sync
command << PRE + "update" + POST if mode_refresh && mode_sync
command << PRE + "upgrade" + POST if mode_upgrade && mode_sync
command << PRE + "install " + packages.join(" ") + POST if mode_sync and not packages.empty?

# Remove operations
command << PRE + "remove " + packages.join(" ") + POST if !mode_purge && !mode_autoremove && mode_remove
command << PRE + "purge " + packages.join(" ") + POST if mode_purge && mode_remove
command << PRE + "autoremove" + POST if mode_autoremove && mode_remove

# Container operations
command << PRE + "init " + packages.join(" ") + POST if mode_init && mode_container
command << PRE + "export --bin " + packages.join(" ") + POST if mode_export && mode_container
command << PRE + "unexport " + packages.join(" ") + POST if mode_unexport && mode_container
command << PRE + "enter " + packages.join(" ") + POST if mode_enter && mode_container
command << PRE + "run " + packages.join(" ") + POST if mode_run && mode_container

command = command[0...-3] # Cut final " &&"

if command == ''
  showHelp()
  exit(0)
end

puts command if mode_verbose

exec(command) if !mode_test